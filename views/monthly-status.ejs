<%- include('layouts/navbar') %>
<div class="container">
  <h1>월별 좌석 현황</h1>

  <!-- 필터링 옵션 -->
  <div class="filters">
    <label for="monthSelect">월 선택:</label>
    <select id="monthSelect" onchange="applyFilters()">
      <% for (let i = 1; i <= 12; i++) { %>
        <option value="<%= i %>" <%= currentMonth == i ? 'selected' : '' %>><%= i %>월</option>
      <% } %>
    </select>
  </div>
  <button onclick="saveBlockData()">블럭 데이터 저장</button>
  <!-- 테이블 -->
  <div class="table-container">
    <table border="1">
      <thead>
        <tr>
          <th>날짜</th>
          <th colspan="9">포항출항</th>
          <th colspan="9">울릉출항</th>
        </tr>
        <tr>
          <th>월/일/요일</th>
          <th>예약 이코</th>
          <th>블럭 이코</th>
          <th>잔여 이코</th>
          <th>예약 비즈</th>
          <th>블럭 비즈</th>
          <th>잔여 비즈</th>
          <th>예약 퍼스</th>
          <th>블럭 퍼스</th>
          <th>잔여 퍼스</th>
          <th>예약 이코</th>
          <th>블럭 이코</th>
          <th>잔여 이코</th>
          <th>예약 비즈</th>
          <th>블럭 비즈</th>
          <th>잔여 비즈</th>
          <th>예약 퍼스</th>
          <th>블럭 퍼스</th>
          <th>잔여 퍼스</th>
        </tr>
      </thead>
      <tbody>
        <% data.forEach(row => { %>
          <tr>
            <!-- 날짜 -->
            <td>
              <%= row.date %> 
              (<%= ['일', '월', '화', '수', '목', '금', '토'][new Date(row.date).getDay()] %>)
            </td>

            <!-- 포항출항 -->
            <td><%= row.departure.economy || 0 %></td>
            <td><input type="number" value="<%= row.departure.ecoBlock || 0 %>" data-field="departure.ecoBlock"></td>
            <td data-field="departure.remainingEco"><%= (row.departure.ecoBlock || 0) - (row.departure.economy || 0) %></td>
            <td><%= row.departure.business || 0 %></td>
            <td><input type="number" value="<%= row.departure.bizBlock || 0 %>" data-field="departure.bizBlock"></td>
            <td data-field="departure.remainingBiz"><%= (row.departure.bizBlock || 0) - (row.departure.business || 0) %></td>
            <td><%= row.departure.first || 0 %></td>
            <td><input type="number" value="<%= row.departure.firstBlock || 0 %>" data-field="departure.firstBlock"></td>
            <td data-field="departure.remainingFirst"><%= (row.departure.firstBlock || 0) - (row.departure.first || 0) %></td>

            <!-- 울릉출항 -->
            <td><%= row.arrival.economy || 0 %></td>
            <td><input type="number" value="<%= row.arrival.ecoBlock || 0 %>" data-field="arrival.ecoBlock"></td>
            <td data-field="arrival.remainingEco"><%= (row.arrival.ecoBlock || 0) - (row.arrival.economy || 0) %></td>
            <td><%= row.arrival.business || 0 %></td>
            <td><input type="number" value="<%= row.arrival.bizBlock || 0 %>" data-field="arrival.bizBlock"></td>
            <td data-field="arrival.remainingBiz"><%= (row.arrival.bizBlock || 0) - (row.arrival.business || 0) %></td>
            <td><%= row.arrival.first || 0 %></td>
            <td><input type="number" value="<%= row.arrival.firstBlock || 0 %>" data-field="arrival.firstBlock"></td>
            <td data-field="arrival.remainingFirst"><%= (row.arrival.firstBlock || 0) - (row.arrival.first || 0) %></td>
          </tr>
        <% }) %>
      </tbody>
    </table>
  </div>
  <button onclick="downloadExcel()">엑셀 다운로드</button>
</div>


<script>
  function applyFilters() {
    const month = parseInt(document.getElementById('monthSelect').value, 10);
    if (isNaN(month) || month < 1 || month > 12) {
      alert('유효한 월을 선택하세요.');
      return;
    }
    window.location.href = `/status/monthly?month=${month}`;
  }

  function downloadExcel() {
    const month = document.getElementById('monthSelect').value;
    window.location.href = `/status/monthly/export?month=${month}`;
  }


  // // 실시간 업데이트
  // document.querySelectorAll('[contenteditable="true"]').forEach((cell) => {
  //   cell.addEventListener('blur', (e) => {
  //     const value = parseInt(e.target.innerText.trim(), 10) || 0;
  //     const field = e.target.getAttribute('data-field');
  //     const [type, key] = field.split('-');
  //     const date = e.target.closest('tr').querySelector('td:first-child').innerText.trim();

  //     fetch(`/status/update-block`, {
  //       method: 'POST',
  //       headers: { 'Content-Type': 'application/json' },
  //       body: JSON.stringify({ date, type, key, value }),
  //     })
  //       .then((response) => response.json())
  //       .then((result) => {
  //         if (!result.success) {
  //           alert('업데이트 실패');
  //         }
  //       });
  //   });
  // });

  // // 실시간 잔여 좌석 계산
  // document.querySelectorAll('input[type="number"]').forEach((input) => {
  //   input.addEventListener('input', (event) => {
  //     const row = event.target.closest('tr');
  //     if (!row) return;

  //     const economyInput = row.querySelector('[data-field="departure.ecoBlock"]');
  //     const economyRemaining = row.querySelector('[data-field="departure.remainingEco"]');
  //     const economyReserved = row.querySelector('td:nth-child(2)')?.innerText;

  //     if (economyInput && economyRemaining && economyReserved) {
  //       const reserved = parseInt(economyReserved, 10) || 0;
  //       const block = parseInt(economyInput.value, 10) || 0;
  //       economyRemaining.innerText = block - reserved;
  //     }
  //   });
  // });

  // // 실시간 서버 업데이트
  // document.querySelectorAll('input[type="number"]').forEach((input) => {
  //   input.addEventListener('blur', (event) => {
  //     const row = event.target.closest('tr');
  //     if (!row) return;

  //     const date = row.querySelector('td:first-child')?.innerText.trim();
  //     const field = event.target.getAttribute('data-field');
  //     const value = parseInt(event.target.value || 0, 10);

  //     const updateData = {
  //       date,
  //       type: field.startsWith('departure') ? 'departure' : 'arrival',
  //       key: field.split('.')[1],
  //       value,
  //     };

  //     fetch('/status/monthly/update-block', {
  //     method: 'POST',
  //     headers: { 'Content-Type': 'application/json' },
  //     body: JSON.stringify({ updates }),
  //   })
  //       .then((response) => {
  //         if (!response.ok) throw new Error('Failed to update block data');
  //         return response.json();
  //       })
  //       .then((result) => {
  //         if (!result.success) {
  //           alert('실시간 업데이트 실패');
  //         }
  //       })
  //       .catch((error) => {
  //         console.error('실시간 업데이트 중 오류:', error);
  //       });
  //   });
  // });

  // function calculateRemainingSeats(row, type) {
  //   // Safely fetch all required elements for the given type (departure or arrival)
  //   const ecoBlockInput = row.querySelector(`[data-field="${type}.ecoBlock"]`);
  //   const bizBlockInput = row.querySelector(`[data-field="${type}.bizBlock"]`);
  //   const firstBlockInput = row.querySelector(`[data-field="${type}.firstBlock"]`);

  //   const economySeatsCell = row.querySelector(`[data-field="${type}.economy"]`);
  //   const businessSeatsCell = row.querySelector(`[data-field="${type}.business"]`);
  //   const firstSeatsCell = row.querySelector(`[data-field="${type}.first"]`);

  //   const remainingEcoCell = row.querySelector(`[data-field="${type}.remainingEco"]`);
  //   const remainingBizCell = row.querySelector(`[data-field="${type}.remainingBiz"]`);
  //   const remainingFirstCell = row.querySelector(`[data-field="${type}.remainingFirst"]`);

  //   if (
  //     !ecoBlockInput ||
  //     !bizBlockInput ||
  //     !firstBlockInput ||
  //     !economySeatsCell ||
  //     !businessSeatsCell ||
  //     !firstSeatsCell ||
  //     !remainingEcoCell ||
  //     !remainingBizCell ||
  //     !remainingFirstCell
  //   ) {
  //     console.error(`One or more required elements are missing in calculateRemainingSeats for type: ${type}`);
  //     return; // Exit the function to prevent further errors
  //   }

  //   // Perform calculations
  //   const ecoBlock = parseInt(ecoBlockInput.value || 0, 10);
  //   const bizBlock = parseInt(bizBlockInput.value || 0, 10);
  //   const firstBlock = parseInt(firstBlockInput.value || 0, 10);

  //   const economySeats = parseInt(economySeatsCell.innerText || 0, 10);
  //   const businessSeats = parseInt(businessSeatsCell.innerText || 0, 10);
  //   const firstSeats = parseInt(firstSeatsCell.innerText || 0, 10);

  //   // Update remaining seats
  //   remainingEcoCell.innerText = ecoBlock - economySeats;
  //   remainingBizCell.innerText = bizBlock - businessSeats;
  //   remainingFirstCell.innerText = firstBlock - firstSeats;

  //   // Apply color based on availability
  //   remainingEcoCell.style.color = (ecoBlock - economySeats) < 0 ? 'red' : 'inherit';
  //   remainingBizCell.style.color = (bizBlock - businessSeats) < 0 ? 'red' : 'inherit';
  //   remainingFirstCell.style.color = (firstBlock - firstSeats) < 0 ? 'red' : 'inherit';
  // }

  // 서버 업데이트 함수


  function calculateRemainingSeats(row, type) {
    const elements = ['ecoBlock', 'bizBlock', 'firstBlock', 'economy', 'business', 'first'];
    const remaining = ['remainingEco', 'remainingBiz', 'remainingFirst'];

    elements.forEach((el, index) => {
      const blockInput = row.querySelector(`[data-field="${type}.${el}"]`);
      const seatsCell = row.querySelector(`[data-field="${type}.${elements[index]}"]`);
      const remainingCell = row.querySelector(`[data-field="${type}.${remaining[index]}"]`);

      if (!blockInput || !seatsCell || !remainingCell) {
        console.error(`Missing element for type ${type}, field: ${el}`);
        return;
      }

      const block = parseInt(blockInput.value || 0, 10);
      const seats = parseInt(seatsCell.innerText || 0, 10);
      remainingCell.innerText = block - seats;
      remainingCell.style.color = block - seats < 0 ? 'red' : 'inherit';
    });
  }

  function updateServer(row, field, value) {
    const date = row.querySelector('td:first-child')?.innerText.trim();
    if (!date) return;

    const updateData = {
      date,
      type: field.startsWith('departure') ? 'departure' : 'arrival',
      key: field.split('.')[1],
      value,
    };

    fetch('/status/monthly/update-block', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(updateData),
    })
      .then((response) => {
        if (!response.ok) throw new Error('Failed to update block data');
        return response.json();
      })
      .then((result) => {
        if (!result.success) {
          alert('실시간 업데이트 실패');
        }
      })
      .catch((error) => {
        console.error('실시간 업데이트 중 오류:', error);
      });
  }

  document.querySelectorAll('input[type="number"]').forEach((input) => {
    input.addEventListener('input', (event) => {
      const row = event.target.closest('tr');
      if (!row) return;

      const type = input.getAttribute('data-field').startsWith('departure') ? 'departure' : 'arrival';
      calculateRemainingSeats(row, type);
    });

    input.addEventListener('blur', (event) => {
      const row = event.target.closest('tr');
      if (!row) return;

      const field = event.target.getAttribute('data-field');
      const value = parseInt(event.target.value || 0, 10);

      updateServer(row, field, value);
    });
  });

  function saveBlockData() {
    const rows = document.querySelectorAll('tbody tr');
    const updates = [];

    rows.forEach((row) => {
      const date = row.querySelector('td:first-child')?.innerText.trim();
      if (!date) return;

      updates.push({
        date,
        departure: {
          ecoBlock: parseInt(row.querySelector('[data-field="departure.ecoBlock"]')?.value || 0, 10),
          bizBlock: parseInt(row.querySelector('[data-field="departure.bizBlock"]')?.value || 0, 10),
          firstBlock: parseInt(row.querySelector('[data-field="departure.firstBlock"]')?.value || 0, 10),
        },
        arrival: {
          ecoBlock: parseInt(row.querySelector('[data-field="arrival.ecoBlock"]')?.value || 0, 10),
          bizBlock: parseInt(row.querySelector('[data-field="arrival.bizBlock"]')?.value || 0, 10),
          firstBlock: parseInt(row.querySelector('[data-field="arrival.firstBlock"]')?.value || 0, 10),
        },
      });
    });

    fetch('/status/monthly/update-block', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ updates }),
    })
      .then((response) => {
        if (!response.ok) throw new Error('Failed to update block data');
        return response.json();
      })
      .then((data) => {
        if (data.success) {
          alert('블럭 데이터가 저장되었습니다.');
          location.reload();
        } else {
          alert('블럭 데이터 저장 중 오류가 발생했습니다.');
        }
      })
      .catch((error) => {
        console.error('Error saving block data:', error);
        alert('블럭 데이터 저장 중 오류가 발생했습니다.');
      });
  }

</script>

<style>
  .filters {
    margin-bottom: 20px;
    display: flex;
    gap: 15px;
    align-items: center;
  }

  .table-container {
    margin-top: 20px;
    overflow-x: auto;
  }

  table {
    width: 100%;
    border-collapse: collapse;
    text-align: center;
  }

  table th {
    background-color: #007bff;
    color: white;
    padding: 10px;
  }

  table td {
    padding: 8px;
  }

  table tr:nth-child(even) {
    background-color: #f2f2f2;
  }

  table tr:hover {
    background-color: #eef;
  }

  button {
    margin-top: 20px;
    padding: 10px 15px;
    background-color: #28a745;
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
  }

  button:hover {
    background-color: #218838;
  }

  .table-container {
  margin-top: 20px;
  overflow-x: auto; /* 가로 스크롤 허용 */
  }

  table {
    width: max-content; /* 테이블이 내용에 맞게 확장됨 */
    border-collapse: collapse;
    text-align: center;
  }

  table th {
    background-color: #007bff;
    color: white;
    padding: 8px;
  }

  table td {
    padding: 6px; /* 간격을 줄임 */
    font-size: 14px; /* 텍스트 크기 조정 */
    white-space: nowrap; /* 텍스트 줄바꿈 방지 */
  }

  .block-cell {
    background-color: #ffc8c8; /* 블럭 셀의 배경을 부드러운 빨간색으로 설정 */
  }

  .remaining-cell {
    background-color: #d1c4f9; /* 잔여 셀의 배경을 부드러운 보라색으로 설정 */
  }

  table tr:nth-child(even) {
    background-color: #f9f9f9;
  }

  table tr:hover {
    background-color: #e0f7fa; /* 행에 마우스를 올렸을 때 색상 변경 */
  }

</style>
