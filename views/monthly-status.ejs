<%- include('layouts/navbar') %>
<div class="container">
  <h1>월별 좌석 현황</h1>

  <!-- 필터링 옵션 -->
  <div class="filters">
    <label for="monthSelect">월 선택:</label>
    <select id="monthSelect" onchange="applyFilters()">
      <% for (let i = 1; i <= 12; i++) { %>
        <option value="<%= i %>" <%= currentMonth == i ? 'selected' : '' %>><%= i %>월</option>
      <% } %>
    </select>
  </div>
  <button class="save-btn" onclick="saveBlockData()">블럭 데이터 저장</button>
  
  <!-- 테이블 -->
  <div class="table-container">
    <table border="1">
      <thead>
        <tr>
          <th>날짜</th>
          <th colspan="9">포항출항</th>
          <th colspan="9">울릉출항</th>
        </tr>
        <tr>
          <th>월/일/요일</th>
          <th>예약 이코</th>
          <th>예약 비즈</th>
          <th>예약 퍼스</th>
          <th>블럭 이코</th>
          <th>블럭 비즈</th>
          <th>블럭 퍼스</th>
          <th>잔여 이코</th>
          <th>잔여 비즈</th>
          <th>잔여 퍼스</th>
          <th>예약 이코</th>
          <th>예약 비즈</th>
          <th>예약 퍼스</th>
          <th>블럭 이코</th>
          <th>블럭 비즈</th>
          <th>블럭 퍼스</th>
          <th>잔여 이코</th>
          <th>잔여 비즈</th>
          <th>잔여 퍼스</th>
        </tr>
      </thead>
      <tbody>
        <% data.forEach(row => { %>
          <tr>
            <!-- 날짜 -->
            <td>
              <%= row.date %> 
              (<%= ['일', '월', '화', '수', '목', '금', '토'][new Date(row.date).getDay()] %>)
            </td>
            <!-- 포항출항 -->
            <td data-field="departure.economy"><%= row.departure.economy || 0 %></td>
            <td data-field="departure.business"><%= row.departure.business || 0 %></td>
            <td data-field="departure.first"><%= row.departure.first || 0 %></td>
            <td>
              <input 
                type="number" 
                value="<%= row.departure.ecoBlock || 0 %>" 
                data-field="departure.ecoBlock"
                min="0"
              >
            </td>
            <td>
              <input 
                type="number" 
                value="<%= row.departure.bizBlock || 0 %>" 
                data-field="departure.bizBlock"
                min="0"
              >
            </td>
            <td>
              <input 
                type="number" 
                value="<%= row.departure.firstBlock || 0 %>" 
                data-field="departure.firstBlock"
                min="0"
              >
            </td>
            <td data-field="departure.remainingEco">
              <%= (row.departure.ecoBlock || 0) - (row.departure.economy || 0) %>
            </td>
            <td data-field="departure.remainingBiz">
              <%= (row.departure.bizBlock || 0) - (row.departure.business || 0) %>
            </td>
            <td data-field="departure.remainingFirst">
              <%= (row.departure.firstBlock || 0) - (row.departure.first || 0) %>
            </td>
            <!-- 울릉출항 -->
            <td data-field="arrival.economy"><%= row.arrival.economy || 0 %></td>
            <td data-field="arrival.business"><%= row.arrival.business || 0 %></td>
            <td data-field="arrival.first"><%= row.arrival.first || 0 %></td>
            <td>
              <input 
                type="number" 
                value="<%= row.arrival.ecoBlock || 0 %>" 
                data-field="arrival.ecoBlock"
                min="0"
              >
            </td>
            <td>
              <input 
                type="number" 
                value="<%= row.arrival.bizBlock || 0 %>" 
                data-field="arrival.bizBlock"
                min="0"
              >
            </td>
            <td>
              <input 
                type="number" 
                value="<%= row.arrival.firstBlock || 0 %>" 
                data-field="arrival.firstBlock"
                min="0"
              >
            </td>
            <td data-field="arrival.remainingEco">
              <%= (row.arrival.ecoBlock || 0) - (row.arrival.economy || 0) %>
            </td>
            <td data-field="arrival.remainingBiz">
              <%= (row.arrival.bizBlock || 0) - (row.arrival.business || 0) %>
            </td>
            <td data-field="arrival.remainingFirst">
              <%= (row.arrival.firstBlock || 0) - (row.arrival.first || 0) %>
            </td>
          </tr>
        <% }) %>
      </tbody>
    </table>
  </div>
  <button class="download-btn" onclick="downloadExcel()">엑셀 다운로드</button>
</div>

<script>
  function applyFilters() {
    const month = document.getElementById('monthSelect').value;
    window.location.href = `/status/monthly?month=${month}`;
  }

  function downloadExcel() {
    const month = document.getElementById('monthSelect').value;
    window.location.href = `/status/monthly/export?month=${month}`;
  }

  function calculateRemainingSeats(row, type) {
    const economyInput = row.querySelector(`[data-field="${type}.ecoBlock"]`);
    const businessInput = row.querySelector(`[data-field="${type}.bizBlock"]`);
    const firstInput = row.querySelector(`[data-field="${type}.firstBlock"]`);

    const economyReserved = row.querySelector(`[data-field="${type}.economy"]`);
    const businessReserved = row.querySelector(`[data-field="${type}.business"]`);
    const firstReserved = row.querySelector(`[data-field="${type}.first"]`);

    const remainingEco = row.querySelector(`[data-field="${type}.remainingEco"]`);
    const remainingBiz = row.querySelector(`[data-field="${type}.remainingBiz"]`);
    const remainingFirst = row.querySelector(`[data-field="${type}.remainingFirst"]`);

    // 디버깅 로그 추가
    console.log(`${type} Calculation Debugging:`);
    console.log('Economy Input:', economyInput);
    console.log('Business Input:', businessInput);
    console.log('First Input:', firstInput);
    console.log('Economy Reserved:', economyReserved);
    console.log('Business Reserved:', businessReserved);
    console.log('First Reserved:', firstReserved);

    if (!economyInput || !businessInput || !firstInput || !economyReserved || !businessReserved || !firstReserved) {
      console.error(`Missing reserved fields for type: ${type}`);
      return; // 필수 필드가 없으면 계산 중단
    }

    // 계산 로직
    remainingEco.innerText = parseInt(economyInput.value || 0, 10) - parseInt(economyReserved.innerText || 0, 10);
    remainingBiz.innerText = parseInt(businessInput.value || 0, 10) - parseInt(businessReserved.innerText || 0, 10);
    remainingFirst.innerText = parseInt(firstInput.value || 0, 10) - parseInt(firstReserved.innerText || 0, 10);

    // 색상 적용
    remainingEco.style.color = parseInt(remainingEco.innerText, 10) < 0 ? 'red' : 'inherit';
    remainingBiz.style.color = parseInt(remainingBiz.innerText, 10) < 0 ? 'red' : 'inherit';
    remainingFirst.style.color = parseInt(remainingFirst.innerText, 10) < 0 ? 'red' : 'inherit';
  }


  document.querySelectorAll('input[type="number"]').forEach(input => {
    input.addEventListener('input', (event) => {
      const row = event.target.closest('tr');
      if (!row) {
        console.error('Row not found for input event.');
        return;
      }
      const type = input.getAttribute('data-field').startsWith('departure') ? 'departure' : 'arrival';
      console.log(`Calculating remaining seats for ${type}...`);
      calculateRemainingSeats(row, type);
    });

    input.addEventListener('blur', (event) => {
      const row = event.target.closest('tr');
      if (!row) {
        console.error('Row not found for blur event.');
        return;
      }
      const field = event.target.getAttribute('data-field');
      let value = parseInt(event.target.value || 0, 10);

      // NaN 방지
      if (isNaN(value) || value < 0) {
        value = 0;
        event.target.value = value; // UI에도 동기화
      }

      console.log(`Updating server with field: ${field}, value: ${value}`);
      updateServer(row, field, value);
    });
  });



  function saveBlockData() {
    const rows = document.querySelectorAll('tbody tr');
    const updates = Array.from(rows).map((row) => {
      const date = row.querySelector('td:first-child')?.innerText.trim();
      if (!date) return null;

      const sanitizeValue = (selector) => {
        const input = row.querySelector(selector);
        const value = parseInt(input?.value || 0, 10);
        return isNaN(value) || value < 0 ? 0 : value;
      };

      return {
        date,
        departure: {
          ecoBlock: sanitizeValue('[data-field="departure.ecoBlock"]'),
          bizBlock: sanitizeValue('[data-field="departure.bizBlock"]'),
          firstBlock: sanitizeValue('[data-field="departure.firstBlock"]'),
        },
        arrival: {
          ecoBlock: sanitizeValue('[data-field="arrival.ecoBlock"]'),
          bizBlock: sanitizeValue('[data-field="arrival.bizBlock"]'),
          firstBlock: sanitizeValue('[data-field="arrival.firstBlock"]'),
        },
      };
    }).filter(Boolean);

    console.log('Payload for update:', updates);

    fetch('/status/monthly/update-block', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ updates }),
    })
      .then((response) => response.json())
      .then((data) => {
        if (data.success) {
          alert('블럭 데이터가 저장되었습니다.');
          location.reload();
        } else {
          alert('블럭 데이터 저장 중 오류가 발생했습니다.');
        }
      })
      .catch((error) => {
        console.error('Error saving block data:', error);
      });
  }





  function updateServer(row, field, value) {
    const date = row.querySelector('td:first-child')?.innerText.trim();
    if (!date) {
      console.error('Date not found in row');
      return;
    }

    // value가 NaN인지 검증하고 기본값 설정
    const validValue = isNaN(value) ? 0 : value;

    console.log(`Updating server with field: ${field}, value: ${validValue}`);

    fetch('/status/monthly/update-block', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        updates: [
          {
            date,
            [field]: validValue,
          },
        ],
      }),
    })
      .then((response) => response.json())
      .then((data) => {
        if (data.success) {
          console.log('Server update successful:', data.message);
        } else {
          console.error('Server update failed:', data.message);
        }
      })
      .catch((error) => {
        console.error('Error updating server:', error);
      });
  }
</script>

<style>
  /* 제목 스타일 */
  h1 {
    text-align: center;
    color: #333;
    margin-bottom: 20px;
  }

  /* 필터 섹션 스타일 */
  .filters {
    display: flex;
    justify-content: center;
    align-items: center;
    margin-bottom: 20px;
    gap: 15px;
  }

  .filters label {
    font-weight: bold;
  }

  .filters select {
    padding: 5px;
    font-size: 14px;
  }

  button {
    padding: 10px 15px;
    font-size: 14px;
    background-color: #007bff;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
  }

  button:hover {
    background-color: #0056b3;
  }

  /* 테이블 스타일 */
  .table-container {
    overflow-x: auto;
    margin-top: 20px;
  }

  table {
    width: 100%;
    border-collapse: collapse;
    text-align: center;
  }

  table th, table td {
    border: 1px solid #ccc;
    padding: 10px;
    white-space: nowrap;
  }

  table th {
    background-color: #007bff;
    color: white;
  }

  table tr:nth-child(even) {
    background-color: #f9f9f9;
  }

  table tr:hover {
    background-color: #f1f1f1;
  }

  /* 잔여 좌석 경고 색상 */
  td[data-field*="remainingEco"],
  td[data-field*="remainingBiz"],
  td[data-field*="remainingFirst"] {
    font-weight: bold;
  }

  td[data-field*="remainingEco"]:not(:empty):hover,
  td[data-field*="remainingBiz"]:not(:empty):hover,
  td[data-field*="remainingFirst"]:not(:empty):hover {
    background-color: #ffe6e6;
  }

  td[data-field*="remainingEco"][style*="color: red"],
  td[data-field*="remainingBiz"][style*="color: red"],
  td[data-field*="remainingFirst"][style*="color: red"] {
    background-color: #ffcccc;
  }

  /* 입력 필드 스타일 */
  input[type="number"] {
    width: 60px;
    padding: 5px;
    font-size: 14px;
    border: 1px solid #ccc;
    border-radius: 3px;
    text-align: center;
  }

  input[type="number"]:focus {
    border-color: #007bff;
    outline: none;
  }

  /* 엑셀 다운로드 버튼 */
  .download-btn {
    margin-top: 20px;
    display: block;
    margin-left: auto;
    margin-right: auto;
    background-color: #28a745;
    color: white;
  }

  .download-btn:hover {
    background-color: #218838;
  }

  .save-btn, .download-btn {
    display: inline-block;
    margin: 10px auto;
  }
</style>
