<%- include('layouts/navbar') %>
<div class="container">
  <h1>월별 좌석 현황</h1>

  <!-- 필터링 옵션 -->
  <div class="filters">
    <label for="monthSelect">월 선택:</label>
    <select id="monthSelect" onchange="applyFilters()">
      <% for (let i = 1; i <= 12; i++) { %>
        <option value="<%= i %>" <%= currentMonth == i ? 'selected' : '' %>><%= i %>월</option>
      <% } %>
    </select>
  </div>
  <button class="save-btn" onclick="saveBlockData()">블럭 데이터 저장</button>
  
  <!-- 테이블 -->
  <div class="table-container">
    <table border="1">
      <thead>
        <tr>
          <th>날짜</th>
          <th colspan="9">포항출항</th>
          <th colspan="9">울릉출항</th>
        </tr>
        <tr>
          <th>월/일/요일</th>
          <th>예약 이코</th>
          <th>예약 비즈</th>
          <th>예약 퍼스</th>
          <th>블럭 이코</th>
          <th>블럭 비즈</th>
          <th>블럭 퍼스</th>
          <th>잔여 이코</th>
          <th>잔여 비즈</th>
          <th>잔여 퍼스</th>
          <th>예약 이코</th>
          <th>예약 비즈</th>
          <th>예약 퍼스</th>
          <th>블럭 이코</th>
          <th>블럭 비즈</th>
          <th>블럭 퍼스</th>
          <th>잔여 이코</th>
          <th>잔여 비즈</th>
          <th>잔여 퍼스</th>
        </tr>
      </thead>
      <tbody>
        <% data.forEach(row => { %>
          <tr>
            <td>
              <%= row.date %>
              (<%= ['일', '월', '화', '수', '목', '금', '토'][new Date(row.date).getDay()] %>)
            </td>
            <td data-field="departure.economy"><%= row.departure.economy || 0 %></td>
            <td data-field="departure.business"><%= row.departure.business || 0 %></td>
            <td data-field="departure.first"><%= row.departure.first || 0 %></td>
            <td data-editable="true" data-field="departure.ecoBlock"><%= row.departure.ecoBlock || 0 %></td>
            <td data-editable="true" data-field="departure.bizBlock"><%= row.departure.bizBlock || 0 %></td>
            <td data-editable="true" data-field="departure.firstBlock"><%= row.departure.firstBlock || 0 %></td>
            <td data-field="departure.remainingEco"><%= (row.departure.ecoBlock || 0) - (row.departure.economy || 0) %></td>
            <td data-field="departure.remainingBiz"><%= (row.departure.bizBlock || 0) - (row.departure.business || 0) %></td>
            <td data-field="departure.remainingFirst"><%= (row.departure.firstBlock || 0) - (row.departure.first || 0) %></td>
            <td data-field="arrival.economy"><%= row.arrival.economy || 0 %></td>
            <td data-field="arrival.business"><%= row.arrival.business || 0 %></td>
            <td data-field="arrival.first"><%= row.arrival.first || 0 %></td>
            <td data-editable="true" data-field="arrival.ecoBlock"><%= row.arrival.ecoBlock || 0 %></td>
            <td data-editable="true" data-field="arrival.bizBlock"><%= row.arrival.bizBlock || 0 %></td>
            <td data-editable="true" data-field="arrival.firstBlock"><%= row.arrival.firstBlock || 0 %></td>
            <td data-field="arrival.remainingEco"><%= (row.arrival.ecoBlock || 0) - (row.arrival.economy || 0) %></td>
            <td data-field="arrival.remainingBiz"><%= (row.arrival.bizBlock || 0) - (row.arrival.business || 0) %></td>
            <td data-field="arrival.remainingFirst"><%= (row.arrival.firstBlock || 0) - (row.arrival.first || 0) %></td>
          </tr>
        <% }) %>
      </tbody>
    </table>
  </div>
  <button class="download-btn" onclick="downloadExcel()">엑셀 다운로드</button>
</div>

<script>
  function applyFilters() {
    const month = document.getElementById('monthSelect').value;
    window.location.href = `/status/monthly?month=${month}`;
  }

  function downloadExcel() {
    const month = document.getElementById('monthSelect').value;
    window.location.href = `/status/monthly/export?month=${month}`;
  }

  function calculateRemainingSeats(row, type) {
    const economyInput = row.querySelector(`[data-field="${type}.ecoBlock"]`);
    const businessInput = row.querySelector(`[data-field="${type}.bizBlock"]`);
    const firstInput = row.querySelector(`[data-field="${type}.firstBlock"]`);

    const economyReserved = row.querySelector(`[data-field="${type}.economy"]`);
    const businessReserved = row.querySelector(`[data-field="${type}.business"]`);
    const firstReserved = row.querySelector(`[data-field="${type}.first"]`);

    const remainingEco = row.querySelector(`[data-field="${type}.remainingEco"]`);
    const remainingBiz = row.querySelector(`[data-field="${type}.remainingBiz"]`);
    const remainingFirst = row.querySelector(`[data-field="${type}.remainingFirst"]`);

    // 값 계산 및 갱신
    remainingEco.innerText = parseInt(economyInput.innerText || 0, 10) - parseInt(economyReserved.innerText || 0, 10);
    remainingBiz.innerText = parseInt(businessInput.innerText || 0, 10) - parseInt(businessReserved.innerText || 0, 10);
    remainingFirst.innerText = parseInt(firstInput.innerText || 0, 10) - parseInt(firstReserved.innerText || 0, 10);
  }


  document.querySelectorAll('td[data-editable]').forEach(cell => {
    cell.addEventListener('click', (event) => {
      const currentValue = cell.innerText.trim();
      const input = document.createElement('input');
      input.type = 'text';
      input.value = currentValue;
      input.style.width = '100%';

      // 셀 클릭 시 기존 값 숨기고 입력 필드 표시
      cell.innerHTML = '';
      cell.appendChild(input);
      input.focus();

      // 입력 완료 시 처리
      input.addEventListener('blur', () => {
        let value = parseInt(input.value, 10);
        if (isNaN(value) || value < 0) value = 0; // 숫자 검증 및 기본값 처리

        // 셀 값 업데이트
        cell.innerText = value;

        // 서버에 업데이트
        const field = cell.getAttribute('data-field');
        const row = cell.closest('tr');
        updateServer(row, field, value);

        // 남은 좌석 계산
        const type = field.startsWith('departure') ? 'departure' : 'arrival';
        calculateRemainingSeats(row, type);
      });

      // 엔터 키 입력 처리
      input.addEventListener('keydown', (event) => {
        if (event.key === 'Enter') {
          input.blur(); // 엔터 누르면 입력 종료
        }
      });
    });
  });

  function saveBlockData() {
    const rows = document.querySelectorAll('tbody tr');
    const updates = Array.from(rows).map((row) => {
      const date = row.querySelector('td:first-child')?.innerText.trim();
      if (!date) return null;

      // 각 필드 데이터를 숫자로 변환
      const departureEcoBlock = parseInt(row.querySelector('[data-field="departure.ecoBlock"]')?.textContent || 0, 10);
      const departureBizBlock = parseInt(row.querySelector('[data-field="departure.bizBlock"]')?.textContent || 0, 10);
      const departureFirstBlock = parseInt(row.querySelector('[data-field="departure.firstBlock"]')?.textContent || 0, 10);

      const arrivalEcoBlock = parseInt(row.querySelector('[data-field="arrival.ecoBlock"]')?.textContent || 0, 10);
      const arrivalBizBlock = parseInt(row.querySelector('[data-field="arrival.bizBlock"]')?.textContent || 0, 10);
      const arrivalFirstBlock = parseInt(row.querySelector('[data-field="arrival.firstBlock"]')?.textContent || 0, 10);

      // 금액 관련 데이터 가져오기
      const totalPrice = parseInt(row.querySelector('[data-field="totalPrice"]')?.textContent || 0, 10);
      const deposit = parseInt(row.querySelector('[data-field="deposit"]')?.textContent || 0, 10);

      return {
        date,
        departure: {
          ecoBlock: isNaN(departureEcoBlock) ? 0 : departureEcoBlock,
          bizBlock: isNaN(departureBizBlock) ? 0 : departureBizBlock,
          firstBlock: isNaN(departureFirstBlock) ? 0 : departureFirstBlock,
        },
        arrival: {
          ecoBlock: isNaN(arrivalEcoBlock) ? 0 : arrivalEcoBlock,
          bizBlock: isNaN(arrivalBizBlock) ? 0 : arrivalBizBlock,
          firstBlock: isNaN(arrivalFirstBlock) ? 0 : arrivalFirstBlock,
        },
        totalPrice: isNaN(totalPrice) ? 0 : totalPrice,
        deposit: isNaN(deposit) ? 0 : deposit,
      };
    }).filter(Boolean);

    console.log('Payload for update:', updates);

    fetch('/status/monthly/update-block', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ updates }),
    })
      .then((response) => {
        if (!response.ok) throw new Error('Failed to update block data');
        return response.json();
      })
      .then((data) => {
        if (data.success) {
          alert('블럭 데이터가 저장되었습니다.');
          location.reload();
        } else {
          alert('블럭 데이터 저장 중 오류가 발생했습니다.');
        }
      })
      .catch((error) => {
        console.error('Error saving block data:', error);
      });
  }


  function updateServer(row, field, value) {
    const date = row.querySelector('td:first-child')?.innerText.trim();
    if (!date) {
      console.error('Date not found in row');
      return;
    }

    fetch('/status/monthly/update-block', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        updates: [
          {
            date,
            [field]: value,
          },
        ],
      }),
    })
      .then((response) => response.json())
      .then((data) => {
        if (data.success) {
          console.log('Server update successful:', data.message);
        } else {
          console.error('Server update failed:', data.message);
        }
      })
      .catch((error) => {
        console.error('Error updating server:', error);
      });
  }
</script>

<style>
  /* 제목 스타일 */
  h1 {
    text-align: center;
    color: #333;
    margin-bottom: 20px;
  }

  /* 필터 섹션 스타일 */
  .filters {
    display: flex;
    justify-content: center;
    align-items: center;
    margin-bottom: 20px;
    gap: 15px;
  }

  .filters label {
    font-weight: bold;
  }

  .filters select {
    padding: 5px;
    font-size: 14px;
  }

  button {
    padding: 10px 15px;
    font-size: 14px;
    background-color: #007bff;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
  }

  button:hover {
    background-color: #0056b3;
  }

  /* 테이블 스타일 */
  .table-container {
    overflow-x: auto;
    margin-top: 20px;
  }

  table {
    width: 100%;
    border-collapse: collapse;
    text-align: center;
  }

  table th, table td {
    border: 1px solid #ccc;
    padding: 10px;
    white-space: nowrap;
  }

  table th {
    background-color: #007bff;
    color: white;
  }

  table tr:nth-child(even) {
    background-color: #f9f9f9;
  }

  table tr:hover {
    background-color: #f1f1f1;
  }

  /* 잔여 좌석 경고 색상 */
  td[data-field*="remainingEco"],
  td[data-field*="remainingBiz"],
  td[data-field*="remainingFirst"] {
    font-weight: bold;
  }

  td[data-field*="remainingEco"]:not(:empty):hover,
  td[data-field*="remainingBiz"]:not(:empty):hover,
  td[data-field*="remainingFirst"]:not(:empty):hover {
    background-color: #ffe6e6;
  }

  td[data-field*="remainingEco"][style*="color: red"],
  td[data-field*="remainingBiz"][style*="color: red"],
  td[data-field*="remainingFirst"][style*="color: red"] {
    background-color: #ffcccc;
  }

  /* 입력 필드 스타일 */
  input[type="number"] {
    width: 60px;
    padding: 5px;
    font-size: 14px;
    border: 1px solid #ccc;
    border-radius: 3px;
    text-align: center;
  }

  input[type="number"]:focus {
    border-color: #007bff;
    outline: none;
  }

  /* 엑셀 다운로드 버튼 */
  .download-btn {
    margin-top: 20px;
    display: block;
    margin-left: auto;
    margin-right: auto;
    background-color: #28a745;
    color: white;
  }

  .download-btn:hover {
    background-color: #218838;
  }

  .save-btn, .download-btn {
    display: inline-block;
    margin: 10px auto;
  }
</style>
