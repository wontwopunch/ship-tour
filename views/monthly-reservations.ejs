<%- include('layouts/navbar') %>
<div class="container">
  <h1>월별 예약 관리</h1>

    <!-- 총 수익 표시 -->
    <div id="totalProfit" style="margin-bottom: 20px; font-weight: bold; font-size: 1.2em;">
      총 수익: 0 원
    </div>

  <!-- 버튼 및 필터 -->
  <div class="button-container">
    <button onclick="addRow()">행 추가</button>
    <button onclick="exportToExcel()">엑셀 저장</button>
    <button onclick="saveChanges()">저장</button>
  </div>
  <div class="filters">
    <label for="reservedByFilter">예약자 검색:</label>
    <input type="text" id="reservedByFilter" placeholder="예약자명 입력" oninput="filterByReservedBy()">

    <label for="monthFilter">월 선택:</label>
    <select id="monthFilter" onchange="filterByMonth()">
      <option value="all">전체</option>
      <% for (let i = 1; i <= 12; i++) { %>
        <option value="<%= i %>" <%= selectedMonth == i ? 'selected' : '' %>><%= i %>월</option>
      <% } %>
    </select>
  </div>

  <!-- 예약 테이블 -->
  <div class="table-container">
    <table border="1" id="reservationTable">
      <thead>
        <tr>
          <th>선박명</th>
          <th>명단</th>
          <th>계약일</th>
          <th>출항일</th>
          <th>입항일</th>
          <th>예약자명</th>
          <th>예약자명2</th>
          <th>연락처</th>
          <th>상품</th>
          <th>총 좌석</th>
          <th>이코노미</th>
          <th>비즈니스</th>
          <th>퍼스트</th>
          <th>독도 관광 날짜</th>
          <th>독도 관광 인원</th>
          <th>독도 관광 시간</th>
          <th>상품내용</th>
          <th>총금액</th>
          <th>계약금</th>
          <th>잔금</th>
          <th>렌터카</th>
          <th>숙박</th>
          <th>기타</th>
          <th>출항비</th>
          <th>입항비</th>
          <th>독도비</th>
          <th>식당비</th>
          <th>행사비</th>
          <th>기타비</th>
          <th>환불</th>
          <th>총 정산비</th>
          <th>수익</th>
          <th>삭제</th>
        </tr>
      </thead>
      <tbody>
        <% if (data && data.length > 0) { %>
          <% data.forEach(row => { %>
            <tr data-id="<%= row._id %>">
              <td>
                <select data-field="ship" onchange="updateField('<%= row._id %>', 'ship', this.value)">
                  <option value="" <%= !row.ship ? 'selected' : '' %>>미지정</option>
                  <% ships.forEach(ship => { %>
                    <option value="<%= ship._id %>" <%= row.ship && row.ship._id == ship._id ? 'selected' : '' %>>
                      <%= ship.name %>
                    </option>
                  <% }) %>
                </select>
              </td>
              <td contenteditable="true" data-field="listStatus"><%= row.listStatus || '' %></td>
              <td>
                <input type="date" value="<%= row.contractDate ? row.contractDate.toISOString().split('T')[0] : '' %>" data-field="contractDate">
              </td>
              <td>
                <input type="date" value="<%= row.departureDate ? row.departureDate.toISOString().split('T')[0] : '' %>" data-field="departureDate">
              </td>
              <td>
                <input type="date" value="<%= row.arrivalDate ? row.arrivalDate.toISOString().split('T')[0] : '' %>" data-field="arrivalDate">
              </td>
              <td contenteditable="true" data-field="reservedBy"><%= row.reservedBy || '' %></td>
              <td contenteditable="true" data-field="reservedBy2"><%= row.reservedBy2 || '' %></td>
              <td contenteditable="true" data-field="contact"><%= row.contact || '' %></td>
              <td contenteditable="true" data-field="product"><%= row.product || '' %></td>
              <td contenteditable="true" data-field="totalSeats"><%= row.totalSeats || 0 %></td>
              <td contenteditable="true" data-field="economySeats"><%= row.economySeats || 0 %></td>
              <td contenteditable="true" data-field="businessSeats"><%= row.businessSeats || 0 %></td>
              <td contenteditable="true" data-field="firstSeats"><%= row.firstSeats || 0 %></td>
              <td>
                <input type="date" value="<%= row.dokdoTourDate ? row.dokdoTourDate.toISOString().split('T')[0] : '' %>" data-field="dokdoTourDate">
              </td>
              <td contenteditable="true" data-field="dokdoTourPeople"><%= row.dokdoTourPeople || 0 %></td>
              <td contenteditable="true" data-field="dokdoTourTime"><%= row.dokdoTourTime || '' %></td>
              <td contenteditable="true" data-field="dokdoTourDetails"><%= row.dokdoTourDetails || '' %></td>
              <td contenteditable="true" data-field="totalPrice"><%= row.totalPrice || 0 %></td>
              <td contenteditable="true" data-field="deposit"><%= row.deposit || 0 %></td>
              <td contenteditable="true" data-field="balance"><%= row.balance || 0 %></td>
              <td contenteditable="true" data-field="rentalCar"><%= row.rentalCar || '' %></td>
              <td contenteditable="true" data-field="accommodation"><%= row.accommodation || '' %></td>
              <td contenteditable="true" data-field="others"><%= row.others || '' %></td>
              <td contenteditable="true" data-field="departureFee"><%= row.departureFee || 0 %></td>
              <td contenteditable="true" data-field="arrivalFee"><%= row.arrivalFee || 0 %></td>
              <td contenteditable="true" data-field="dokdoFee"><%= row.dokdoFee || 0 %></td>
              <td contenteditable="true" data-field="restaurantFee"><%= row.restaurantFee || 0 %></td>
              <td contenteditable="true" data-field="eventFee"><%= row.eventFee || 0 %></td>
              <td contenteditable="true" data-field="otherFee"><%= row.otherFee || 0 %></td>
              <td contenteditable="true" data-field="refund"><%= row.refund || 0 %></td>
              <td contenteditable="true" data-field="totalSettlement"><%= row.totalSettlement || 0 %></td>
              <td contenteditable="true" data-field="profit"><%= row.profit || 0 %></td>
              <td><button onclick="deleteRow('<%= row._id %>')">삭제</button></td>
            </tr>
          <% }) %>
        <% } else { %>
          <tr>
            <td colspan="33">해당 월에 예약된 데이터가 없습니다.</td>
          </tr>
        <% } %>
      </tbody>         
    </table>
   </div>
  </div>

<script>
  const ships = <%- JSON.stringify(ships) %>;

  const highlightedCells = new Set();

  function getCaretPosition(element) {
    const selection = window.getSelection();
    if (selection.rangeCount > 0) {
      const range = selection.getRangeAt(0);
      const preCaretRange = range.cloneRange();
      preCaretRange.selectNodeContents(element);
      preCaretRange.setEnd(range.endContainer, range.endOffset);
      return preCaretRange.toString().length;
    }
    return 0;
  }

  function setCaretPosition(element, position) {
    const range = document.createRange();
    const selection = window.getSelection();
    const textNode = element.firstChild || element;
    
    if (textNode.nodeType === 3) {
      position = Math.min(position, textNode.length);
      range.setStart(textNode, position);
      range.setEnd(textNode, position);
      selection.removeAllRanges();
      selection.addRange(range);
    }
  }

  function updateField(id, field, value) {
    if (!id) return; // ID가 없으면 종료

    fetch(`/reservation/update/${id}`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ [field]: value }),
    })
      .then((response) => response.json())
      .then((data) => {
        if (data.success) {
          console.log(`Field '${field}' updated successfully.`);
        } else {
          console.error('Error updating field:', data.message);
        }
      })
      .catch((error) => console.error('Error:', error));
  }

  function setFormattedValue(cell, value) {
    if (!cell) return; // cell이 null일 경우 함수 종료

    const numericFields = [
      'totalSeats', 'economySeats', 'businessSeats', 'firstSeats',
      'dokdoTourPeople', 'totalPrice', 'deposit', 'balance',
      'departureFee', 'arrivalFee', 'dokdoFee', 'restaurantFee',
      'eventFee', 'otherFee', 'refund', 'totalSettlement', 'profit'
    ];

    const fieldName = cell.getAttribute('data-field');
    if (!fieldName) return; // 필드 이름이 없을 경우 종료

    const isNumericField = numericFields.includes(fieldName);
    const isActiveCell = document.activeElement === cell;

    const currentLength = cell.innerText.length;
    const selection = window.getSelection();
    const cursorPosition = isActiveCell ? selection.focusOffset : 0;

    if (!isNumericField) {
      cell.innerText = value.toString();
      if (isActiveCell) {
        const range = document.createRange();
        const textNode = cell.firstChild || cell;
        if (textNode.nodeType === 3) {
          const newPosition = Math.min(cursorPosition, textNode.length);
          range.setStart(textNode, newPosition);
          range.setEnd(textNode, newPosition);
          selection.removeAllRanges();
          selection.addRange(range);
        }
      }
      return;
    }

    if (value === 0 && isActiveCell) {
      cell.innerText = '';
      return;
    }

    const formattedValue = value === 0 ? '' : value.toLocaleString('en-US');
    cell.innerText = formattedValue;

    if (isActiveCell) {
      const newPosition = Math.min(
        cursorPosition + (formattedValue.length - currentLength),
        formattedValue.length
      );
      setCaretPosition(cell, Math.max(0, newPosition));
    }
  }


  function saveChanges() {
    const rows = document.querySelectorAll('#reservationTable tbody tr');
    const updatedData = [];
    const newData = [];

    rows.forEach((row) => {
      const id = row.getAttribute('data-id');
      const rowData = {};

      row.querySelectorAll('[data-field]').forEach((cell) => {
        const fieldName = cell.getAttribute('data-field');
        let value;

        // 드롭다운(select)에서 값을 정확히 가져오기
        if (fieldName === 'ship') {
          const selectElement = cell.querySelector('select');
          value = selectElement ? selectElement.value : null;
        } 
        // 일반 입력 필드 처리
        else {
          const inputElement = cell.querySelector('input');
          value = inputElement ? inputElement.value : cell.innerText.trim();
        }

        // 숫자 필드 변환
        const numericFields = [
          'totalSeats', 'economySeats', 'businessSeats', 'firstSeats',
          'dokdoTourPeople', 'totalPrice', 'deposit', 'balance',
          'departureFee', 'arrivalFee', 'dokdoFee', 'restaurantFee',
          'eventFee', 'otherFee', 'refund', 'totalSettlement', 'profit'
        ];
        if (numericFields.includes(fieldName)) {
          value = parseFloat(value.replace(/,/g, '')) || 0;
        }

        rowData[fieldName] = value;
      });

      if (id) {
        rowData._id = id; // 기존 데이터의 ID
        updatedData.push(rowData);
      } else {
        newData.push(rowData); // 신규 데이터
      }
    });

    console.log("Updated Data:", updatedData);
    console.log("New Data:", newData);

    // 서버로 데이터 전송
    fetch('/reservation/bulk-update', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(updatedData),
    })
      .then((response) => response.json())
      .then((data) => {
        if (data.success) {
          alert('데이터가 성공적으로 저장되었습니다.');
          location.reload();
        } else {
          alert(`저장 실패: ${data.message}`);
        }
      })
      .catch((error) => {
        console.error('저장 중 오류:', error);
        alert('저장 중 오류가 발생했습니다.');
      });
  }



  function filterByMonth() {
    const month = document.getElementById('monthFilter').value;
    window.location.href = `/reservation/monthly?month=${month}`;
  }

  function addRow() {
    const table = document.getElementById('reservationTable').getElementsByTagName('tbody')[0];
    const newRow = table.insertRow(0);

    const shipOptions = ships.map(ship => `<option value="${ship._id}">${ship.name}</option>`).join('');

    newRow.innerHTML = `
      <td>
        <select data-field="ship">
          <option value="" disabled selected>선박 선택</option>
          ${shipOptions}
        </select>
      </td>
      <td contenteditable="true" data-field="listStatus"></td>
      <td><input type="date" data-field="contractDate" value="${new Date().toISOString().split('T')[0]}"></td>
      <td><input type="date" data-field="departureDate" value="${new Date().toISOString().split('T')[0]}"></td>
      <td><input type="date" data-field="arrivalDate" value="${new Date().toISOString().split('T')[0]}"></td>
      <td contenteditable="true" data-field="reservedBy"></td>
      <td contenteditable="true" data-field="reservedBy2"></td>
      <td contenteditable="true" data-field="contact"></td>
      <td contenteditable="true" data-field="product"></td>
      <td contenteditable="true" data-field="totalSeats">0</td>
      <td contenteditable="true" data-field="economySeats">0</td>
      <td contenteditable="true" data-field="businessSeats">0</td>
      <td contenteditable="true" data-field="firstSeats">0</td>
      <td><input type="date" data-field="dokdoTourDate"></td>
      <td contenteditable="true" data-field="dokdoTourPeople">0</td>
      <td contenteditable="true" data-field="dokdoTourTime"></td>
      <td contenteditable="true" data-field="dokdoTourDetails"></td>
      <td contenteditable="true" data-field="totalPrice">0</td>
      <td contenteditable="true" data-field="deposit">0</td>
      <td contenteditable="true" data-field="balance">0</td>
      <td contenteditable="true" data-field="rentalCar"></td>
      <td contenteditable="true" data-field="accommodation"></td>
      <td contenteditable="true" data-field="others"></td>
      <td contenteditable="true" data-field="departureFee">0</td>
      <td contenteditable="true" data-field="arrivalFee">0</td>
      <td contenteditable="true" data-field="dokdoFee">0</td>
      <td contenteditable="true" data-field="restaurantFee">0</td>
      <td contenteditable="true" data-field="eventFee">0</td>
      <td contenteditable="true" data-field="otherFee">0</td>
      <td contenteditable="true" data-field="refund">0</td>
      <td contenteditable="true" data-field="totalSettlement">0</td>
      <td contenteditable="true" data-field="profit">0</td>
      <td><button onclick="deleteRow(null)">삭제</button></td>
    `;
  }

  function deleteRow(id) {
    if (!confirm('이 행을 삭제하시겠습니까?')) return;
    if (id) {
      fetch(`/reservation/delete/${id}`, { method: 'DELETE' })
        .then((response) => response.json())
        .then((data) => {
          if (data.success) location.reload();
        });
    } else {
      event.target.closest('tr').remove();
    }
  }

  document.addEventListener('DOMContentLoaded', () => {
    const table = document.getElementById('reservationTable');
    const tableBody = table.querySelector('tbody');
    const totalProfitElement = document.getElementById('totalProfit');
    
    function calculateRow(row) {
      const getValue = (field) => {
       const cell = row.querySelector(`[data-field="${field}"]`);
       return cell ? parseFloat(cell.innerText.replace(/,/g, '').trim()) || 0 : 0;
      };

    const setValue = (field, value) => {
      const cell = row.querySelector(`[data-field="${field}"]`);
      if (cell) setFormattedValue(cell, value);
    };

      const totalPrice = getValue('totalPrice');
      const deposit = getValue('deposit');
      const departureFee = getValue('departureFee');
      const arrivalFee = getValue('arrivalFee');
      const dokdoFee = getValue('dokdoFee');
      const restaurantFee = getValue('restaurantFee');
      const eventFee = getValue('eventFee');
      const otherFee = getValue('otherFee');
      const refund = getValue('refund');

      // // 잔금 계산
      // const balance = Math.floor(totalPrice - deposit);
      // const balanceCell = row.querySelector('[data-field="balance"]');
      // setFormattedValue(balanceCell, balance);

      // // 총 정산비 계산식 수정
      // const totalSettlement = departureFee + arrivalFee + dokdoFee + restaurantFee + eventFee + otherFee - refund; // 수정됨
      // const totalSettlementCell = row.querySelector('[data-field="totalSettlement"]');
      // setFormattedValue(totalSettlementCell, totalSettlement);

      // return totalSettlement; // 반환 값 포함

      // // 수익 계산
      // const profit = totalPrice - totalSettlement;
      // const profitCell = row.querySelector('[data-field="profit"]');
      // setFormattedValue(profitCell, profit);

      // 잔금 계산
      const balance = totalPrice - deposit;
      setValue('balance', balance);

      // 총 정산비 계산
      const totalSettlement = departureFee + arrivalFee + dokdoFee + restaurantFee + eventFee + otherFee - refund;
      setValue('totalSettlement', totalSettlement);

      // 수익 계산
      const profit = totalPrice - totalSettlement;
      setValue('profit', profit);

      return profit;
    }

    function calculateTotalProfit() {
      const rows = Array.from(document.querySelectorAll('#reservationTable tbody tr'));
      const totalProfit = rows.reduce((sum, row) => sum + calculateRow(row), 0);
      document.getElementById('totalProfit').innerText = `총 수익: ${totalProfit.toLocaleString('en-US')} 원`;
    }

    // 한글 입력 완료 이벤트
    tableBody.addEventListener('compositionend', handleInput);

    // 일반 입력 이벤트
    tableBody.addEventListener('input', (e) => {
      // IME 입력 중에는 처리하지 않음
      if (e.isComposing) return;
      handleInput(e);
    });

    function handleInput(e) {
      const cell = e.target.closest('[data-field]');
      if (!cell) return;

      const row = cell.closest('tr');
      if (!row) return;

      if (e.target.tagName === 'SELECT') return;

      const fieldName = cell.getAttribute('data-field');
      const value = cell.innerText.trim();
      let processedValue = value;

      const numericFields = [
        'totalSeats', 'economySeats', 'businessSeats', 'firstSeats',
        'dokdoTourPeople',
        'totalPrice', 'deposit', 'balance',
        'departureFee', 'arrivalFee', 'dokdoFee',
        'restaurantFee', 'eventFee', 'otherFee',
        'refund', 'totalSettlement', 'profit'
      ];

      const isNumericField = numericFields.includes(fieldName);

      if (isNumericField) {
        processedValue = parseFloat(value.replace(/,/g, '')) || 0;
      }

      // 현재 커서 위치 저장
      const selection = window.getSelection();
      const cursorPosition = selection.focusOffset;

      // 값 설정
      if (isNumericField) {
        setFormattedValue(cell, processedValue);
      } else {
        cell.innerText = processedValue;
      }

      // 커서 위치 복원 (텍스트 필드의 경우)
      if (!isNumericField && document.activeElement === cell) {
        const range = document.createRange();
        const textNode = cell.firstChild || cell;
        if (textNode.nodeType === 3) {
          const newPosition = Math.min(cursorPosition, textNode.length);
          range.setStart(textNode, newPosition);
          range.setEnd(textNode, newPosition);
          selection.removeAllRanges();
          selection.addRange(range);
        }
      }

      calculateRow(row);
      calculateTotalProfit();

      // 실시간 업데이트
      const id = row.getAttribute('data-id');
      if (id) {
        const updatedData = {};
        updatedData[fieldName] = processedValue;

        fetch(`/reservation/update/${id}`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(updatedData),
        });
      }
    }

    // select 변경 이벤트
    table.addEventListener('change', (e) => {
      if (e.target.tagName === 'SELECT') {
        const row = e.target.closest('tr');
        const id = row.getAttribute('data-id');
        if (!id) return;

        const updatedData = {
          ship: e.target.value
        };

        fetch(`/reservation/update/${id}`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(updatedData),
        });
      }
    });

    // 초기 계산
    calculateTotalProfit();
  });

  // 총금액/계약금/잔액 더블클릭 시 바탕색 노란색으로 표시
  document.addEventListener('dblclick', (e) => {
    const cell = e.target.closest('[data-field]');
    if (cell) {
      cell.style.backgroundColor = 'yellow'; // 하이라이트
      const rowId = cell.closest('tr').getAttribute('data-id');
      const field = cell.getAttribute('data-field');

      if (rowId && field) {
        highlightedCells.add(`${rowId}:${field}`); // 셀 상태 저장
      }
    }
  });

  // 저장 후 하이라이트 복원
  document.addEventListener('DOMContentLoaded', () => {
    const rows = document.querySelectorAll('#reservationTable tbody tr');
    rows.forEach((row) => {
      const rowId = row.getAttribute('data-id');
      row.querySelectorAll('[data-field]').forEach((cell) => {
        const field = cell.getAttribute('data-field');
        if (highlightedCells.has(`${rowId}:${field}`)) {
          cell.style.backgroundColor = 'yellow'; // 저장된 하이라이트 복원
        }
      });
    });
  });

  // 예약자명 검색 기능 추가
  function filterByReservedBy() {
    const filterInput = document.getElementById('reservedByFilter').value.trim().toLowerCase();
    const rows = document.querySelectorAll('#reservationTable tbody tr');

    rows.forEach((row) => {
      const reservedBy = row.querySelector('[data-field="reservedBy"]').innerText.trim().toLowerCase();
      row.style.display = reservedBy.includes(filterInput) ? '' : 'none'; // 필터 적용
    });
  }

  function exportToExcel() {
    window.location.href = '/reservation/export';
  }
</script>

<style>
    .button-container {
      display: flex;
      gap: 10px;
      margin-bottom: 20px;
    }
    
    .button-container button {
      padding: 10px 15px;
      background-color: #007bff;
      color: white;
      border: none;
      cursor: pointer;
      border-radius: 5px;
    }
    
    .button-container button:hover {
      background-color: #0056b3;
    }
    
    .table-container {
      overflow-x: auto; /* 가로 스크롤 허용 */
      margin-top: 20px;
    }
    
    table {
      width: max-content; /* 테이블이 내용에 맞게 확장됨 */
      border-collapse: collapse;
      margin: 0 auto;
    }
    
    table th, table td {
      padding: 10px;
      text-align: center;
      white-space: nowrap; /* 텍스트 줄바꿈 방지 */
    }
    
    table th {
      background-color: #007bff;
      color: white;
    }
    
    table tr:nth-child(even) {
      background-color: #f2f2f2;
    }
    
    table tr:hover {
      background-color: #e6f7ff;
    }
    </style>
    